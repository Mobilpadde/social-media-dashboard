import './App.css.proxy.js';
/* src/App.svelte generated by Svelte v3.29.7 */
import {
	SvelteComponent,
	add_flush_callback,
	append,
	attr,
	bind,
	binding_callbacks,
	check_outros,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_data,
	space,
	text,
	toggle_class,
	transition_in,
	transition_out
} from "../web_modules/svelte/internal.js";

import { onMount } from "../web_modules/svelte.js";
import "./main.css.proxy.js";
import Toggle from "./components/Toggle.js";
import Card from "./components/Card.js";
import SmallCard from "./components/SmallCard.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i];
	return child_ctx;
}

// (204:4) {#each users as x}
function create_each_block_2(ctx) {
	let card;
	let current;

	card = new Card({
			props: {
				changeGoes: /*x*/ ctx[9].changeGoes,
				icon: /*x*/ ctx[9].icon,
				type: /*x*/ ctx[9].type,
				username: /*x*/ ctx[9].username,
				total: /*x*/ ctx[9].total,
				change: /*x*/ ctx[9].change
			}
		});

	return {
		c() {
			create_component(card.$$.fragment);
		},
		m(target, anchor) {
			mount_component(card, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const card_changes = {};
			if (dirty & /*users*/ 2) card_changes.changeGoes = /*x*/ ctx[9].changeGoes;
			if (dirty & /*users*/ 2) card_changes.icon = /*x*/ ctx[9].icon;
			if (dirty & /*users*/ 2) card_changes.type = /*x*/ ctx[9].type;
			if (dirty & /*users*/ 2) card_changes.username = /*x*/ ctx[9].username;
			if (dirty & /*users*/ 2) card_changes.total = /*x*/ ctx[9].total;
			if (dirty & /*users*/ 2) card_changes.change = /*x*/ ctx[9].change;
			card.$set(card_changes);
		},
		i(local) {
			if (current) return;
			transition_in(card.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(card.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(card, detaching);
		}
	};
}

// (226:8) {#each entries[1] as x}
function create_each_block_1(ctx) {
	let smallcard;
	let current;

	smallcard = new SmallCard({
			props: {
				changeGoes: /*x*/ ctx[9].changeGoes,
				icon: /*x*/ ctx[9].icon,
				text: /*x*/ ctx[9].text,
				total: /*x*/ ctx[9].total,
				change: /*x*/ ctx[9].change
			}
		});

	return {
		c() {
			create_component(smallcard.$$.fragment);
		},
		m(target, anchor) {
			mount_component(smallcard, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const smallcard_changes = {};
			if (dirty & /*events*/ 4) smallcard_changes.changeGoes = /*x*/ ctx[9].changeGoes;
			if (dirty & /*events*/ 4) smallcard_changes.icon = /*x*/ ctx[9].icon;
			if (dirty & /*events*/ 4) smallcard_changes.text = /*x*/ ctx[9].text;
			if (dirty & /*events*/ 4) smallcard_changes.total = /*x*/ ctx[9].total;
			if (dirty & /*events*/ 4) smallcard_changes.change = /*x*/ ctx[9].change;
			smallcard.$set(smallcard_changes);
		},
		i(local) {
			if (current) return;
			transition_in(smallcard.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(smallcard.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(smallcard, detaching);
		}
	};
}

// (216:4) {#each Object.entries(events) as entries}
function create_each_block(ctx) {
	let h3;

	let t0_value = new Intl.DateTimeFormat("uk",
	{
			year: "numeric",
			month: "2-digit",
			day: "2-digit"
		}).format(/*entries*/ ctx[6][0]) + "";

	let t0;
	let t1;
	let div;
	let t2;
	let current;
	let each_value_1 = /*entries*/ ctx[6][1];
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			h3 = element("h3");
			t0 = text(t0_value);
			t1 = space();
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			attr(h3, "class", "svelte-1oxtxmz");
			attr(div, "class", "section svelte-1oxtxmz");
		},
		m(target, anchor) {
			insert(target, h3, anchor);
			append(h3, t0);
			insert(target, t1, anchor);
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			append(div, t2);
			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty & /*events*/ 4) && t0_value !== (t0_value = new Intl.DateTimeFormat("uk",
			{
					year: "numeric",
					month: "2-digit",
					day: "2-digit"
				}).format(/*entries*/ ctx[6][0]) + "")) set_data(t0, t0_value);

			if (dirty & /*Object, events*/ 4) {
				each_value_1 = /*entries*/ ctx[6][1];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, t2);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(h3);
			if (detaching) detach(t1);
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div3;
	let header;
	let div0;
	let h1;
	let t1;
	let h3;
	let t2;
	let t3;
	let t4;
	let toggle;
	let updating_toggled;
	let t5;
	let div1;
	let t6;
	let div2;
	let current;

	function toggle_toggled_binding(value) {
		/*toggle_toggled_binding*/ ctx[3].call(null, value);
	}

	let toggle_props = {};

	if (/*dark*/ ctx[0] !== void 0) {
		toggle_props.toggled = /*dark*/ ctx[0];
	}

	toggle = new Toggle({ props: toggle_props });
	binding_callbacks.push(() => bind(toggle, "toggled", toggle_toggled_binding));
	let each_value_2 = /*users*/ ctx[1];
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks_1[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	const out = i => transition_out(each_blocks_1[i], 1, 1, () => {
		each_blocks_1[i] = null;
	});

	let each_value = Object.entries(/*events*/ ctx[2]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out_1 = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			div3 = element("div");
			header = element("header");
			div0 = element("div");
			h1 = element("h1");
			h1.textContent = "Social Media Dashboard";
			t1 = space();
			h3 = element("h3");
			t2 = text("Total Followers: ");
			t3 = text(/*dark*/ ctx[0]);
			t4 = space();
			create_component(toggle.$$.fragment);
			t5 = space();
			div1 = element("div");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t6 = space();
			div2 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(h1, "class", "svelte-1oxtxmz");
			attr(h3, "class", "svelte-1oxtxmz");
			attr(header, "class", "svelte-1oxtxmz");
			attr(div1, "class", "section svelte-1oxtxmz");
			attr(div2, "class", "title-section svelte-1oxtxmz");
			attr(div3, "class", "app svelte-1oxtxmz");
			toggle_class(div3, "dark", /*dark*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, header);
			append(header, div0);
			append(div0, h1);
			append(div0, t1);
			append(div0, h3);
			append(h3, t2);
			append(h3, t3);
			append(header, t4);
			mount_component(toggle, header, null);
			append(div3, t5);
			append(div3, div1);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(div1, null);
			}

			append(div3, t6);
			append(div3, div2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div2, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*dark*/ 1) set_data(t3, /*dark*/ ctx[0]);
			const toggle_changes = {};

			if (!updating_toggled && dirty & /*dark*/ 1) {
				updating_toggled = true;
				toggle_changes.toggled = /*dark*/ ctx[0];
				add_flush_callback(() => updating_toggled = false);
			}

			toggle.$set(toggle_changes);

			if (dirty & /*users*/ 2) {
				each_value_2 = /*users*/ ctx[1];
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
						transition_in(each_blocks_1[i], 1);
					} else {
						each_blocks_1[i] = create_each_block_2(child_ctx);
						each_blocks_1[i].c();
						transition_in(each_blocks_1[i], 1);
						each_blocks_1[i].m(div1, null);
					}
				}

				group_outros();

				for (i = each_value_2.length; i < each_blocks_1.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (dirty & /*Object, events, Intl*/ 4) {
				each_value = Object.entries(/*events*/ ctx[2]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div2, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out_1(i);
				}

				check_outros();
			}

			if (dirty & /*dark*/ 1) {
				toggle_class(div3, "dark", /*dark*/ ctx[0]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(toggle.$$.fragment, local);

			for (let i = 0; i < each_value_2.length; i += 1) {
				transition_in(each_blocks_1[i]);
			}

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			transition_out(toggle.$$.fragment, local);
			each_blocks_1 = each_blocks_1.filter(Boolean);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				transition_out(each_blocks_1[i]);
			}

			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div3);
			destroy_component(toggle);
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const generateEvents = n => new Array(n).fill({}).map(x => ({
		total: +Math.random().toString().slice(4, 6)
	})).map(x => ({
		...x,
		change: +Math.random().toString().slice(4, 5)
	})).map((x, i) => ({
		...x,
		text: ["Likes", "Retweets", "Profile Views", "Total Views"][~~(i % n)]
	})).map((x, i) => ({
		...x,
		icon: ["facebook", "twitter", "instagram", "youtube"][~~(i % n)]
	})).map(x => ({
		...x,
		changeGoes: Math.random() > 0.5 ? "up" : "down"
	}));

	let dark = true;

	let users = [
		{
			icon: "facebook",
			type: "fb",
			username: "@Mobilpadde",
			total: 0,
			changeGoes: "up",
			change: 0
		},
		{
			icon: "twitter",
			type: "tw",
			username: "@Mobilpadde",
			total: 0,
			changeGoes: "up",
			change: 0
		},
		{
			icon: "instagram",
			type: "ig",
			username: "@Mobilpadde",
			total: 0,
			changeGoes: "up",
			change: 0
		},
		{
			icon: "youtube",
			type: "yt",
			username: "Mobilpadde",
			total: 0,
			changeGoes: "up",
			change: 0
		}
	];

	const today = new Date();

	let events = {
		[new Date().setDate(today.getDate() - 1)]: generateEvents(4),
		[new Date().setDate(today.getDate() - 2)]: generateEvents(4),
		[new Date().setDate(today.getDate() - 3)]: generateEvents(4)
	};

	onMount(() => {
		const t = () => Math.random() * 4000 + 1000;
		let next = true;

		const _ = () => {
			Object.entries(events).forEach(([d]) => {
				$$invalidate(
					2,
					events[d] = events[d].map(x => {
						const add = x.changeGoes === "up" ? 1 : -1;
						x.change += add;
						x.total += add;
						return x;
					}),
					events
				);
			});

			if (next) setTimeout(_, t());
		};

		setTimeout(_, t());
		return () => next = false;
	});

	function toggle_toggled_binding(value) {
		dark = value;
		$$invalidate(0, dark);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*dark*/ 1) {
			$: {
				if (dark) {
					document.body.classList.add("dark");
				} else {
					document.body.classList.remove("dark");
				}
			}
		}

		if ($$self.$$.dirty & /*users, events*/ 6) {
			$: {
				for (let i in users) {
					$$invalidate(1, users[i].total = 0, users);
					$$invalidate(1, users[i].change = 0, users);

					for (let j of Object.keys(events)) {
						const e = events[j].find(y => y.icon === users[i].icon);
						$$invalidate(1, users[i].total += e.total, users);
						$$invalidate(1, users[i].change += e.change * (e.changeGoes === "up" ? 1 : -1), users);
					}

					$$invalidate(1, users[i].changeGoes = users[i].change >= 0 ? "up" : "down", users);
				}
			}
		}
	};

	return [dark, users, events, toggle_toggled_binding];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;